###############################################################################
# User management API
# brought to you by LastOps (http://lastops.com)
###############################################################################

body file control
# @ignore
{
    namespace => "lastops";
}

bundle agent user(user, uid, description, home_dir, group_primary, groups_secondary, shell, pw)
# @brief Creates unix user and makes sure it retains its properties
# @param user Username
# @param uid Numeric UID
# @param description Description
# @param home_dir Home directory
# @param group_primary Primary group
# @param groups_secondary List of additional groups
# @param shell Shell
# @param pw Password hash
{
        vars:
            "g_s" slist => splitstring("$(groups_secondary)", ",", 1000);

        files:
            "$(home_dir)/."
                create => "true",
                perms => default:mog("700", "$(user)","$(user)");

        users:
            "$(user)"
                policy => "present",
                uid =>  "$(uid)",
                description => "$(description)",
                home_dir => "$(home_dir)",
                group_primary => "$(group_primary)",
                groups_secondary => { @(g_s) },
                shell => "$(shell)",
                password => default:hashed_password("$(pw)"),
                classes => default:if_repaired("enforsing_user");
        reports:
            enforsing_user::
                "Enforsing user's parameters for $(user). Making it exists";
}

bundle agent soft_user(user, uid, description, home_dir, group_primary, groups_secondary, shell, pw)
# @brief Creates unix user if it doesn't exist
# @param user Username
# @param uid Numeric UID
# @param description Description
# @param home_dir Home directory
# @param group_primary Primary group
# @param groups_secondary List of additional groups
# @param shell Shell
# @param pw Password hash
{
    classes:
        "add_$(user)" not => userexists("$(user)");

    methods:
        "add_users" usebundle => lastops:user("$(user)", "$(uid)", "$(description)", "$(home_dir)", "$(group_primary)", "$(groups_secondary)", "$(shell)", "$(pw)"),
            ifvarclass => "add_$(user)",
            classes => default:if_repaired("added_user");
    reports:
        added_user::
                "Making sure user $(user) exists";
}

bundle agent no_user(user)
# @brief Removes user from system
# @param user Username
{
    users:
        "$(user)"
            policy => "absent";
}

bundle agent no_user_tidy(user, home_dir)
# @brief Removes user and its home directory
# @param user Username
# @param home_dir Home directory
{
    users:
        "$(user)"
            policy => "absent";
    files:
       "$(home_dir)"
            delete => default:tidy;
}

bundle agent lock_user(user)
# @brief Locks user account by setting its password to '*'
# @param user Username
{
    users:
        "$(user)"
            policy => "locked";
}

bundle agent enforce_password(user, pw)
# @brief Enforces password for user
# @param user Username
# @param pw Password hash (hashed using default to target system aglorithm)
{
    files:
        "/etc/shadow"
            edit_line => default:set_user_field("$(user)", 2, "$(pw)");
}

bundle agent enfoce_shell(user, shell)
# @brief Enforce shell for user account
# @param user Username
# @param shell Path to shell binary
{
    files:
        "/etc/passwd"
            edit_line => default:set_user_field("$(user)", 7, "$(shell)");
}

bundle agent authorized_keys(user,home_dir,key)
# @brief Add public files to user's ~/.ssh/authorized_keys
# @param user Username
# @param home_dir Absolute path to user's home directory
# @param key Path to users public key file
{
    files:
        "$(home_dir)/.ssh/"
            create => "true",
            perms => default:mog("700", "$(user)","$(user)");
        "$(home_dir)/.ssh/authorized_keys"
            create => "true",
            edit_line => default:insert_file("$(key)"),
            perms => default:og("$(user)","$(user)");
    }

#TODO:
# bundle agent enfoce_authorized_keys(user,home_dir,key){
#     files:
#
#     }
